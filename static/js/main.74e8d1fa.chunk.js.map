{"version":3,"sources":["components/Editor.jsx","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","handleChange","bind","state","value","Fragment","className","onChange","this","defaultValue","e","setState","target","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAsCeA,E,kDApCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,MACJ,CACGC,MAAO,IAPI,E,0CAWnB,WACI,OACA,cAAC,IAAMC,SAAP,UACI,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,UACI,uCAEA,0BAAUA,UAAU,aAAaC,SAAUC,KAAKP,aAAcQ,aAAcD,KAAKL,MAAMC,WAE3F,sBAAKE,UAAU,SAAf,UACI,0CAEA,0BAAUA,UAAU,cAAcC,SAAUC,KAAKP,aAAcQ,aAAcD,KAAKL,MAAMC,kB,0BAQxG,SAAaM,GACTF,KAAKG,SAAS,CAACP,MAAOM,EAAEE,OAAOR,Y,GAjClBS,IAAMC,W,MCWZC,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,OCKSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.74e8d1fa.chunk.js","sourcesContent":["import React from 'react';\nclass Editor extends React.Component{\n    constructor(props) {\n        super(props);\n        // to bind the method with event handler without (). \n        this.handleChange = this.handleChange.bind(this);\n\n        this.state =\n         { \n            value: ''\n        };\n    }\n\n    render(){\n        return(\n        <React.Fragment>\n            <div className=\"container\">\n                <div className=\"input\">\n                    <h3>Input</h3>\n                    \n                    <textarea className=\"input-text\" onChange={this.handleChange} defaultValue={this.state.value}/>\n                </div>\n                <div className=\"output\">\n                    <h3>Pro Note</h3>\n\n                    <textarea className=\"output-text\" onChange={this.handleChange} defaultValue={this.state.value}/>\n                </div>                \n            </div>\n        </React.Fragment>\n        )\n    }\n    //event handler method to change the state.\n    //setState is used to change the state.\n    handleChange(e){\n        this.setState({value: e.target.value});\n    }\n}\n\nexport default Editor;","import React from 'react';\nimport Editor from './components/Editor';\nimport './App.css';\n\nfunction App(){\n  return(\n    <div className=\"App\">\n      <Editor/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}